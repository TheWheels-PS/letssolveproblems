/* 
코드는 쓰다가 작년 자료구조 책이랑 구글링으로 공부했음
이해한 알고리즘 풀이 주석으로 기록해둠

1. map 입력받을때
└ (0일 경우) cnt++ 토마토가 익을 때까지 날짜 증가
└ (1일 경우) 큐에 넣어서 주변에 영향을 미침 -> BFS의 시작점

2. BFS 함수 실행 중
큐에서 익은 토마토가 있는 좌표로부터 시작하고 주변 토마토 익힘
하나 익을때 cnt 하나씩 감소시키고, 익은 토마토가 또 주변에 영향을 미치므로 큐에 다시 넣기

3. [x][y] (익은 토마토) 로부터 [nextx][nexty] (안익은 토마토)가 익을때까지 하루 걸림
map[nextx][nexty] = map[x][y] + 1
따라서 BFS를 제일 마지막으로 실행시키는 좌표는 마지막 날이 됨

4. 큐에 있던 토마토들이 나간 후 cnt를 확인
cnt가 0일 경우 모든 토마토가 익었다는 뜻이므로 map[x][y]-1 (맨 처음 값이 1이었으므로 1 빼기)

5. 만약 1이 아니라면 토마토가 다 익지 않았다는 것이므로 -1 return
*/

#include<stdio.h>
#define size 1005
#define queue_size 1000050

int input_x, input_y;
 
struct node {
    int x;
    int y;
};
 
struct node queue[queue_size];
int head = 0;
int tail = 0;
int cnt = 0;
 
int vect_x[4] = { 0, 0, 1, -1 };
int vect_y[4] = { 1, -1, 0, 0 };
 
int map[size][size];
 
struct node dequeue() {
    struct node temp = queue[head];
    head = (head + 1) % queue_size;
    return temp;
}
 
void enqueue(int x_, int y_) {
    struct node temp;
    temp.x = x_;
    temp.y = y_;
    queue[tail] = temp;
    tail = (tail + 1) % queue_size;
}
 
int queueEmpty() {
    return((tail == head) ? 1 : 0);
}
 
int BFS() {
    int x, y;
    int nextx; int nexty;
    while (queueEmpty() == 0) {
        struct node temp = dequeue();
        x = temp.x; y = temp.y;
        for (int i = 0; i < 4; i++) {
            nextx = x + vectx[i];
            nexty = y + vecty[i];
 
            if (nextx >= 0 && nexty >= 0 && nextx < input_x && nexty < input_y) {
                //이번에 익은 토마토 -> queue 에 넣는다.
                if (map[nextx][nexty] == 0) {
                    map[nextx][nexty] = map[x][y] + 1;
                    enqueue(nextx, nexty);
                    cnt--;
                }
            }
        }
    }
 
    // queue가 다 비워지고 모든 토마토가 다 익은 경우
    if (cnt == 0) {
        return (map[x][y] - 1);
    }
 
    // queue가 다 비워졌지만 아직도 다 안익은 경우
    return -1;
}
 
int main() {
    scanf("%d %d", &input_y, &input_x);
    for (int i = 0; i < input_x; i++) {
        for (int j = 0; j < input_y; j++) {
            scanf("%d", &map[i][j]);
            if (map[i][j] == 0) {
                cnt++;
            }
            else if(map[i][j] == 1) {
                enqueue(i, j);
            }
        }
    }
 
    printf("%d", BFS());
 
}
